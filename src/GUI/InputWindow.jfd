JFDML JFormDesigner: "6.0.5.0.178" Java: "1.8.0_152-release" encoding: "UTF-8"

new FormModel {
	contentType: "form/swing"
	root: new FormRoot {
		add( new FormWindow( "javax.swing.JFrame", new FormLayoutManager( class org.jdesktop.layout.GroupLayout ) {
			"$horizontalGroup": "par l {seq {space :p:16:p, par l {seq {par l {seq l {comp brandLabel:::p::p, space u:::p, comp brandComboBox:::p::p}, seq l {comp expStorageLabel:::p::p, space :6:6:p, comp expandableStorage:::p::p}, seq l {comp displayLabel:::p::p, space :::p, comp screenSize:::p::p}, seq l {comp label1:::p::p, space u:::p, comp dualSimBox:::p::p}, seq l {comp ageLabel:::p::p, space s:::p, comp age:::p:50:p, space :::p, comp ageFieldRequired:::p::p}, seq l {comp label3:::p::p, space :::p, comp WaterproofBox:::p::p}, seq l {par t {comp submit:::p::p, comp otherLabel:::p::p}, space u:::p, comp Preference:::p::p}}, space :0:82:x}, seq l {comp budgetLabel:::p::p, space :12:12:p, comp min:::p:50:p, space :6:6:p, comp max:::p::p, space :::p, comp budgetFieldRequired::::208:x}}, space :::p}, seq l {space :p:187:p, comp Title:::p::p, space ::188:x}}"
			"$verticalGroup": "par l {seq l {space :::p, comp Title:::p::p, space :p:18:p, par l {comp budgetLabel:::p:28:p, seq l {space :4:4:p, par l {comp min:::p::p, par b {comp max::b:p::p, comp budgetFieldRequired::b:p:20:p}}}}, space :p:8:p, par l {comp ageFieldRequired::t:p::p, par b:t {comp age::b:p::p, comp ageLabel::b:p:28:p}}, space :p:11:p, par b {comp brandLabel::b:p::p, comp brandComboBox::b:p::p}, space :6:6:p, par l {seq l {space :3:3:p, comp expStorageLabel:::p::p}, comp expandableStorage:::p::p}, space :6:6:p, par b {comp screenSize::b:p::p, comp displayLabel::b:p::p}, space :::p, par b {comp label1::b:p::p, comp dualSimBox::b:p::p}, space :::p, par b {comp label3::b:p::p, comp WaterproofBox::b:p::p}, space :::p, par b {comp otherLabel::b:p::p, comp Preference::b:p::p}, space ::187:x, comp submit:::p::p, space :::p}}"
		} ) {
			name: "this"
			"defaultCloseOperation": 2
			"title": "Phone App - Input"
			"font": new java.awt.Font( "Dialog", 0, 13 )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "Title"
				"text": "Phone App"
				"font": new com.jformdesigner.model.SwingDerivedFont( null, 0, 9, false )
				"horizontalAlignment": 0
				"horizontalTextPosition": 0
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "budgetLabel"
				"text": "Budget (min-max):"
				"font": &SwingDerivedFont0 new com.jformdesigner.model.SwingDerivedFont( null, 0, 3, false )
			} )
			add( new FormComponent( "javax.swing.JTextField" ) {
				name: "min"
				"columns": 1
				"minimumSize": &Dimension0 new java.awt.Dimension( 50, 25 )
				"preferredSize": &Dimension1 new java.awt.Dimension( 50, 25 )
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "min.getDocument().addDocumentListener(new DocumentListener() {\npublic void changedUpdate (DocumentEvent e){\n    changed();\n}\npublic void removeUpdate (DocumentEvent e){\n    changed();\n}\npublic void insertUpdate (DocumentEvent e){\n    changed();\n}\n\npublic void changed () {\n    String regex = \"\\\\d+\";\n    if (max.getText().equals(\"\") || min.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        budgetFieldRequired.setText(\"*these fields are required!\");\n        budgetFieldRequired.setVisible(true);\n    } else {\n        if (!max.getText().matches(regex) || !min.getText().matches(regex)) {\n            budgetFieldRequired.setText(\"*these fields should contain only numbers!\");\n            budgetFieldRequired.setVisible(true);\n        } else {\n            budgetFieldRequired.setVisible(false);\n            if (age.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n    if (age.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        ageFieldRequired.setText(\"*this field is required!\");\n        ageFieldRequired.setVisible(true);\n    } else {\n        if (!age.getText().matches(regex)) {\n            ageFieldRequired.setText(\"*this field should contain only numbers!\");\n            ageFieldRequired.setVisible(true);\n        } else {\n            ageFieldRequired.setVisible(false);\n            if (max.getText().matches(regex) && min.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n}\n});"
				}
			} )
			add( new FormComponent( "javax.swing.JTextField" ) {
				name: "max"
				"minimumSize": new java.awt.Dimension( 50, 25 )
				"preferredSize": new java.awt.Dimension( 50, 25 )
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "max.getDocument().addDocumentListener(new DocumentListener() {\npublic void changedUpdate (DocumentEvent e){\n    changed();\n}\npublic void removeUpdate (DocumentEvent e){\n    changed();\n}\npublic void insertUpdate (DocumentEvent e){\n    changed();\n}\n\npublic void changed () {\n    String regex = \"\\\\d+\";\n    if (max.getText().equals(\"\") || min.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        budgetFieldRequired.setText(\"*these fields are required!\");\n        budgetFieldRequired.setVisible(true);\n    } else {\n        if (!max.getText().matches(regex) || !min.getText().matches(regex)) {\n            budgetFieldRequired.setText(\"*these fields should contain only numbers!\");\n            budgetFieldRequired.setVisible(true);\n        } else {\n            budgetFieldRequired.setVisible(false);\n            if (age.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n    if (age.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        ageFieldRequired.setText(\"*this field is required!\");\n        ageFieldRequired.setVisible(true);\n    } else {\n        if (!age.getText().matches(regex)) {\n            ageFieldRequired.setText(\"*this field should contain only numbers!\");\n            ageFieldRequired.setVisible(true);\n        } else {\n            ageFieldRequired.setVisible(false);\n            if (max.getText().matches(regex) && min.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n}\n});"
				}
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "ageLabel"
				"text": "What age will the user have?"
				"font": #SwingDerivedFont0
			} )
			add( new FormComponent( "javax.swing.JTextField" ) {
				name: "age"
				"columns": 1
				"minimumSize": #Dimension0
				"preferredSize": #Dimension1
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "age.getDocument().addDocumentListener(new DocumentListener() {\npublic void changedUpdate (DocumentEvent e){\n    changed();\n}\npublic void removeUpdate (DocumentEvent e){\n    changed();\n}\npublic void insertUpdate (DocumentEvent e){\n    changed();\n}\n\npublic void changed () {\n    String regex = \"\\\\d+\";\n    if (max.getText().equals(\"\") || min.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        budgetFieldRequired.setText(\"*these fields are required!\");\n        budgetFieldRequired.setVisible(true);\n    } else {\n        if (!max.getText().matches(regex) || !min.getText().matches(regex)) {\n            budgetFieldRequired.setText(\"*these fields should contain only numbers!\");\n            budgetFieldRequired.setVisible(true);\n        } else {\n            budgetFieldRequired.setVisible(false);\n            if (age.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n    if (age.getText().equals(\"\")) {\n        submit.setEnabled(false);\n        ageFieldRequired.setText(\"*this field is required!\");\n        ageFieldRequired.setVisible(true);\n    } else {\n        if (!age.getText().matches(regex)) {\n            ageFieldRequired.setText(\"*this field should contain only numbers!\");\n            ageFieldRequired.setVisible(true);\n        } else {\n            ageFieldRequired.setVisible(false);\n            if (max.getText().matches(regex) && min.getText().matches(regex)) {\n                submit.setEnabled(true);\n            }\n        }\n    }\n}\n});"
				}
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "brandLabel"
				"text": "What is your prefered brand?"
				"font": &SwingDerivedFont1 new com.jformdesigner.model.SwingDerivedFont( null, 0, 3, false )
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "brandComboBox"
				"minimumSize": new java.awt.Dimension( 98, 30 )
				auxiliary() {
					"JavaCodeGenerator.variableName": "brandComboBox"
					"JavaCodeGenerator.postInitCode": "for (Phone.PhoneBrandSelector brand : Phone.PhoneBrandSelector.values()) {\n            brandComboBox.addItem(brand.toString());\n       }"
				}
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "expStorageLabel"
				"text": "Do you want expandable storage?"
				"font": #SwingDerivedFont1
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "expandableStorage"
				"minimumSize": new java.awt.Dimension( 98, 30 )
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "for(Phone.ExpandableStorage option : Phone.ExpandableStorage.values()) {\n            expandableStorage.addItem(option);\n        }"
				}
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "displayLabel"
				"text": "Any display size preferences?"
				"font": #SwingDerivedFont1
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "screenSize"
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "screenSize.addItem(\"None\");\nscreenSize.addItem(\"Bigger than 5.2\\\"\");\nscreenSize.addItem(\"Smaller than 5.2\\\"\");\n"
				}
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "otherLabel"
				"text": "Do you have any specific preferences?"
				"font": #SwingDerivedFont1
			} )
			add( new FormComponent( "javax.swing.JButton" ) {
				name: "submit"
				"text": "Search"
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "submit.setEnabled(false);"
				}
				addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "submitActionPerformed", true ) )
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "label1"
				"text": "Dual sim capability?"
				"font": new com.jformdesigner.model.SwingDerivedFont( null, 0, 3, false )
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "label3"
				"text": "Waterproof?"
				"font": new com.jformdesigner.model.SwingDerivedFont( null, 0, 3, false )
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "budgetFieldRequired"
				"text": "*these fields are required!"
				"foreground": new java.awt.Color( 255, 0, 51, 255 )
			} )
			add( new FormComponent( "javax.swing.JLabel" ) {
				name: "ageFieldRequired"
				"text": "*this field is required!"
				"foreground": new java.awt.Color( 255, 0, 51, 255 )
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "dualSimBox"
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "dualSimBox.addItem(\"Not important\");\ndualSimBox.addItem(\"Yes\");\ndualSimBox.addItem(\"No\");\n"
				}
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "WaterproofBox"
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "WaterproofBox.addItem(\"Not important\");\nWaterproofBox.addItem(\"Yes\");\nWaterproofBox.addItem(\"No\");\n"
				}
			} )
			add( new FormComponent( "javax.swing.JComboBox" ) {
				name: "Preference"
				auxiliary() {
					"JavaCodeGenerator.postInitCode": "Preference.addItem(\"No preferences\");\nPreference.addItem(\"Better battery\");\nPreference.addItem(\"Better performance\");\nPreference.addItem(\"Better design\");\nPreference.addItem(\"Better camera\");\n"
				}
			} )
		}, new FormLayoutConstraints( null ) {
			"location": new java.awt.Point( 720, 150 )
			"size": new java.awt.Dimension( 480, 595 )
		} )
	}
}
